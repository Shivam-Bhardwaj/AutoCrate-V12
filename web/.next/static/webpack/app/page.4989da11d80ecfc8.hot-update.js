"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/services/logger.ts":
/*!********************************!*\
  !*** ./src/services/logger.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: function() { return /* binding */ LogLevel; },\n/* harmony export */   logger: function() { return /* binding */ logger; }\n/* harmony export */ });\n/**\n * Advanced logging service for AutoCrate Web\n * Provides comprehensive logging with local storage and server sync\n */ var LogLevel;\n(function(LogLevel) {\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n    LogLevel[LogLevel[\"INFO\"] = 1] = \"INFO\";\n    LogLevel[LogLevel[\"WARN\"] = 2] = \"WARN\";\n    LogLevel[LogLevel[\"ERROR\"] = 3] = \"ERROR\";\n    LogLevel[LogLevel[\"CRITICAL\"] = 4] = \"CRITICAL\";\n})(LogLevel || (LogLevel = {}));\nclass Logger {\n    setupErrorHandlers() {\n        var _this = this;\n        // Global error handler\n        window.addEventListener(\"error\", (event)=>{\n            if (!this.isLogging) {\n                this.isLogging = true;\n                try {\n                    var _event_error, _event_error1;\n                    this.error(\"Unhandled Error\", \"global\", {\n                        message: event.message,\n                        filename: event.filename,\n                        lineno: event.lineno,\n                        colno: event.colno,\n                        error: ((_event_error = event.error) === null || _event_error === void 0 ? void 0 : _event_error.message) || ((_event_error1 = event.error) === null || _event_error1 === void 0 ? void 0 : _event_error1.toString())\n                    });\n                } finally{\n                    this.isLogging = false;\n                }\n            }\n        });\n        // Capture unhandled promise rejections\n        window.addEventListener(\"unhandledrejection\", (event)=>{\n            if (!this.isLogging) {\n                this.isLogging = true;\n                try {\n                    var _event_reason, _event_reason1;\n                    this.error(\"Unhandled Promise Rejection\", \"global\", {\n                        reason: ((_event_reason = event.reason) === null || _event_reason === void 0 ? void 0 : _event_reason.message) || ((_event_reason1 = event.reason) === null || _event_reason1 === void 0 ? void 0 : _event_reason1.toString()) || \"Unknown reason\"\n                    });\n                } finally{\n                    this.isLogging = false;\n                }\n            }\n        });\n        // Override console.error to capture all errors (with recursion prevention)\n        const originalError = this.originalConsole.error;\n        console.error = function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            // Always call original first\n            originalError.apply(console, args);\n            // Then try to log if not already logging\n            if (!_this.isLogging) {\n                _this.isLogging = true;\n                try {\n                    const message = args.map((arg)=>{\n                        if (typeof arg === \"string\") return arg;\n                        if (arg === null || arg === void 0 ? void 0 : arg.message) return arg.message;\n                        try {\n                            return JSON.stringify(arg);\n                        } catch (e) {\n                            return \"Complex object\";\n                        }\n                    }).join(\" \");\n                    // Only create log entry, don't log to console again\n                    const entry = _this.createLogEntry(3, \"Console Error: \" + message, \"console\");\n                    _this.addLog(entry);\n                } catch (e) {\n                // Silently fail to prevent any issues\n                } finally{\n                    _this.isLogging = false;\n                }\n            }\n        };\n        // Log initial page load\n        this.info(\"Page loaded\", \"navigation\", {\n            url: window.location.href,\n            referrer: document.referrer\n        });\n    }\n    static getInstance() {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n    generateSessionId() {\n        return \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9));\n    }\n    createLogEntry(level, message, category, data) {\n        // Clean data to prevent circular references\n        let cleanData = undefined;\n        if (data) {\n            try {\n                cleanData = this.cleanData(data);\n            } catch (e) {\n                cleanData = {\n                    error: \"Could not serialize data\"\n                };\n            }\n        }\n        return {\n            id: \"\".concat(Date.now(), \"-\").concat(Math.random().toString(36).substr(2, 9)),\n            timestamp: new Date(),\n            level,\n            message,\n            category,\n            data: cleanData,\n            sessionId: this.sessionId,\n            userAgent: typeof navigator !== \"undefined\" ? navigator.userAgent : \"SSR\",\n            url:  true ? window.location.href : 0,\n            stack: level >= 3 ? new Error().stack : undefined\n        };\n    }\n    cleanData(obj) {\n        let seen = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : new WeakSet();\n        if (obj === null || obj === undefined) return obj;\n        if (typeof obj !== \"object\") return obj;\n        // Handle circular references\n        if (seen.has(obj)) return \"[Circular Reference]\";\n        seen.add(obj);\n        // Handle special cases\n        if (obj instanceof Error) {\n            return {\n                name: obj.name,\n                message: obj.message,\n                stack: obj.stack\n            };\n        }\n        if (obj instanceof Date) {\n            return obj.toISOString();\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item)=>this.cleanData(item, seen));\n        }\n        // Handle regular objects\n        const cleaned = {};\n        for(const key in obj){\n            try {\n                if (obj.hasOwnProperty(key)) {\n                    cleaned[key] = this.cleanData(obj[key], seen);\n                }\n            } catch (e) {\n                cleaned[key] = \"[Unserializable]\";\n            }\n        }\n        return cleaned;\n    }\n    addLog(entry) {\n        this.logs.push(entry);\n        // Keep only the most recent logs\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(-this.maxLogs);\n        }\n        // Log to console if enabled (but prevent recursion)\n        if (this.enableConsoleOutput && !this.isLogging) {\n            this.logToConsole(entry);\n        }\n        // Save to local storage\n        this.saveToLocalStorage();\n        // Sync with server if enabled\n        if (this.enableServerSync) {\n            this.sendToServer(entry).catch(()=>{\n            // Silently fail server sync\n            });\n        }\n    }\n    logToConsole(entry) {\n        if (!this.enableConsoleOutput || this.isLogging) return;\n        const timestamp = entry.timestamp.toISOString();\n        const prefix = \"[\".concat(timestamp, \"] [\").concat(entry.category || \"general\", \"]\");\n        // Use original console methods to prevent recursion\n        switch(entry.level){\n            case 0:\n                this.originalConsole.debug(prefix, entry.message, entry.data);\n                break;\n            case 1:\n                this.originalConsole.info(prefix, entry.message, entry.data);\n                break;\n            case 2:\n                this.originalConsole.warn(prefix, entry.message, entry.data);\n                break;\n            case 3:\n            case 4:\n                // Don't use console.error as it might be overridden\n                this.originalConsole.error(prefix, entry.message, entry.data);\n                break;\n        }\n    }\n    async sendToServer(entry) {\n        try {\n            const apiUrl = \"http://localhost:8001/api\" || 0;\n            await fetch(\"\".concat(apiUrl, \"/logs\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(entry)\n            });\n        } catch (error) {\n        // Silently fail - don't log to prevent recursion\n        }\n    }\n    saveToLocalStorage() {\n        if (false) {}\n        try {\n            const recentLogs = this.logs.slice(-100) // Save only last 100 logs\n            ;\n            localStorage.setItem(\"autocrate_logs\", JSON.stringify(recentLogs));\n        } catch (error) {\n        // Silently fail if localStorage is full or unavailable\n        }\n    }\n    loadFromLocalStorage() {\n        if (false) {}\n        try {\n            const stored = localStorage.getItem(\"autocrate_logs\");\n            if (stored) {\n                const parsed = JSON.parse(stored);\n                this.logs = parsed.map((log)=>({\n                        ...log,\n                        timestamp: new Date(log.timestamp)\n                    }));\n            }\n        } catch (error) {\n        // Silently fail if data is corrupted\n        }\n    }\n    // Public logging methods\n    debug(message, category, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(0, message, category || \"general\", data);\n        this.addLog(entry);\n    }\n    info(message, category, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(1, message, category || \"general\", data);\n        this.addLog(entry);\n    }\n    warn(message, category, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(2, message, category || \"general\", data);\n        this.addLog(entry);\n    }\n    error(message, category, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(3, message, category || \"general\", data);\n        this.addLog(entry);\n    }\n    critical(message, category, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(4, message, category || \"general\", data);\n        this.addLog(entry);\n    }\n    // Query and filter methods\n    getLogs(filter) {\n        let filtered = [\n            ...this.logs\n        ];\n        if (filter) {\n            if (filter.level !== undefined) {\n                filtered = filtered.filter((log)=>log.level >= filter.level);\n            }\n            if (filter.category) {\n                filtered = filtered.filter((log)=>log.category === filter.category);\n            }\n            if (filter.startTime) {\n                filtered = filtered.filter((log)=>log.timestamp >= filter.startTime);\n            }\n            if (filter.endTime) {\n                filtered = filtered.filter((log)=>log.timestamp <= filter.endTime);\n            }\n            if (filter.searchTerm) {\n                const term = filter.searchTerm.toLowerCase();\n                filtered = filtered.filter((log)=>log.message.toLowerCase().includes(term) || JSON.stringify(log.data).toLowerCase().includes(term));\n            }\n        }\n        return filtered;\n    }\n    clearLogs() {\n        this.logs = [];\n        this.saveToLocalStorage();\n    }\n    exportLogs() {\n        return JSON.stringify(this.logs, null, 2);\n    }\n    // User action logging method\n    logUserAction(action, element, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(1, \"User action: \".concat(action), \"user-action\", {\n            action,\n            element,\n            ...data\n        });\n        this.addLog(entry);\n    }\n    // Performance logging method\n    logPerformance(metric, value, data) {\n        if (this.isLogging) return;\n        const entry = this.createLogEntry(0, \"Performance: \".concat(metric), \"performance\", {\n            metric,\n            value,\n            unit: \"ms\",\n            ...data\n        });\n        this.addLog(entry);\n    }\n    // Configuration methods\n    setConsoleOutput(enabled) {\n        this.enableConsoleOutput = enabled;\n    }\n    setServerSync(enabled) {\n        this.enableServerSync = enabled;\n    }\n    constructor(){\n        this.logs = [];\n        this.maxLogs = 1000;\n        this.enableConsoleOutput = true;\n        this.enableServerSync = false;\n        this.isLogging = false // Prevent recursion\n        ;\n        this.originalConsole = {\n            log: console.log,\n            debug: console.debug,\n            info: console.info,\n            warn: console.warn,\n            error: console.error\n        };\n        this.sessionId = this.generateSessionId();\n        this.loadFromLocalStorage();\n        if (true) {\n            this.setupErrorHandlers();\n        }\n    }\n}\nconst logger = Logger.getInstance();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (logger);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/logger.ts\n"));

/***/ })

});