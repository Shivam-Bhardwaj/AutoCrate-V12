"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@monogrid";
exports.ids = ["vendor-chunks/@monogrid"];
exports.modules = {

/***/ "(ssr)/./node_modules/@monogrid/gainmap-js/dist/QuadRenderer-DuOPRGA4.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@monogrid/gainmap-js/dist/QuadRenderer-DuOPRGA4.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Q: () => (/* binding */ QuadRenderer)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/**\n * @monogrid/gainmap-js v3.1.0\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */ \nconst getBufferForType = (type, width, height)=>{\n    let out;\n    switch(type){\n        case three__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType:\n            out = new Uint8ClampedArray(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType:\n            out = new Uint16Array(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.UnsignedIntType:\n            out = new Uint32Array(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.ByteType:\n            out = new Int8Array(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.ShortType:\n            out = new Int16Array(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.IntType:\n            out = new Int32Array(width * height * 4);\n            break;\n        case three__WEBPACK_IMPORTED_MODULE_0__.FloatType:\n            out = new Float32Array(width * height * 4);\n            break;\n        default:\n            throw new Error(\"Unsupported data type\");\n    }\n    return out;\n};\nlet _canReadPixelsResult;\n/**\n * Test if this browser implementation can correctly read pixels from the specified\n * Render target type.\n *\n * Runs only once\n *\n * @param type\n * @param renderer\n * @param camera\n * @param renderTargetOptions\n * @returns\n */ const canReadPixels = (type, renderer, camera, renderTargetOptions)=>{\n    if (_canReadPixelsResult !== undefined) return _canReadPixelsResult;\n    const testRT = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(1, 1, renderTargetOptions);\n    renderer.setRenderTarget(testRT);\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(), new three__WEBPACK_IMPORTED_MODULE_0__.MeshBasicMaterial({\n        color: 0xffffff\n    }));\n    renderer.render(mesh, camera);\n    renderer.setRenderTarget(null);\n    const out = getBufferForType(type, testRT.width, testRT.height);\n    renderer.readRenderTargetPixels(testRT, 0, 0, testRT.width, testRT.height, out);\n    testRT.dispose();\n    mesh.geometry.dispose();\n    mesh.material.dispose();\n    _canReadPixelsResult = out[0] !== 0;\n    return _canReadPixelsResult;\n};\n/**\n * Utility class used for rendering a texture with a material\n *\n * @category Core\n * @group Core\n */ class QuadRenderer {\n    /**\n     * Constructs a new QuadRenderer\n     *\n     * @param options Parameters for this QuadRenderer\n     */ constructor(options){\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n        this._rendererIsDisposable = false;\n        this._supportsReadPixels = true;\n        /**\n         * Renders the input texture using the specified material\n         */ this.render = ()=>{\n            this._renderer.setRenderTarget(this._renderTarget);\n            try {\n                this._renderer.render(this._scene, this._camera);\n            } catch (e) {\n                this._renderer.setRenderTarget(null);\n                throw e;\n            }\n            this._renderer.setRenderTarget(null);\n        };\n        this._width = options.width;\n        this._height = options.height;\n        this._type = options.type;\n        this._colorSpace = options.colorSpace;\n        const rtOptions = {\n            // fixed options\n            format: three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat,\n            depthBuffer: false,\n            stencilBuffer: false,\n            // user options\n            type: this._type,\n            colorSpace: this._colorSpace,\n            anisotropy: ((_a = options.renderTargetOptions) === null || _a === void 0 ? void 0 : _a.anisotropy) !== undefined ? (_b = options.renderTargetOptions) === null || _b === void 0 ? void 0 : _b.anisotropy : 1,\n            generateMipmaps: ((_c = options.renderTargetOptions) === null || _c === void 0 ? void 0 : _c.generateMipmaps) !== undefined ? (_d = options.renderTargetOptions) === null || _d === void 0 ? void 0 : _d.generateMipmaps : false,\n            magFilter: ((_e = options.renderTargetOptions) === null || _e === void 0 ? void 0 : _e.magFilter) !== undefined ? (_f = options.renderTargetOptions) === null || _f === void 0 ? void 0 : _f.magFilter : three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            minFilter: ((_g = options.renderTargetOptions) === null || _g === void 0 ? void 0 : _g.minFilter) !== undefined ? (_h = options.renderTargetOptions) === null || _h === void 0 ? void 0 : _h.minFilter : three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter,\n            samples: ((_j = options.renderTargetOptions) === null || _j === void 0 ? void 0 : _j.samples) !== undefined ? (_k = options.renderTargetOptions) === null || _k === void 0 ? void 0 : _k.samples : undefined,\n            wrapS: ((_l = options.renderTargetOptions) === null || _l === void 0 ? void 0 : _l.wrapS) !== undefined ? (_m = options.renderTargetOptions) === null || _m === void 0 ? void 0 : _m.wrapS : three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping,\n            wrapT: ((_o = options.renderTargetOptions) === null || _o === void 0 ? void 0 : _o.wrapT) !== undefined ? (_p = options.renderTargetOptions) === null || _p === void 0 ? void 0 : _p.wrapT : three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping\n        };\n        this._material = options.material;\n        if (options.renderer) {\n            this._renderer = options.renderer;\n        } else {\n            this._renderer = QuadRenderer.instantiateRenderer();\n            this._rendererIsDisposable = true;\n        }\n        this._scene = new three__WEBPACK_IMPORTED_MODULE_0__.Scene();\n        this._camera = new three__WEBPACK_IMPORTED_MODULE_0__.OrthographicCamera();\n        this._camera.position.set(0, 0, 10);\n        this._camera.left = -0.5;\n        this._camera.right = 0.5;\n        this._camera.top = 0.5;\n        this._camera.bottom = -0.5;\n        this._camera.updateProjectionMatrix();\n        if (!canReadPixels(this._type, this._renderer, this._camera, rtOptions)) {\n            let alternativeType;\n            switch(this._type){\n                case three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType:\n                    alternativeType = this._renderer.extensions.has(\"EXT_color_buffer_float\") ? three__WEBPACK_IMPORTED_MODULE_0__.FloatType : undefined;\n                    break;\n            }\n            if (alternativeType !== undefined) {\n                console.warn(`This browser does not support reading pixels from ${this._type} RenderTargets, switching to ${three__WEBPACK_IMPORTED_MODULE_0__.FloatType}`);\n                this._type = alternativeType;\n            } else {\n                this._supportsReadPixels = false;\n                console.warn(\"This browser dos not support toArray or toDataTexture, calls to those methods will result in an error thrown\");\n            }\n        }\n        this._quad = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh(new three__WEBPACK_IMPORTED_MODULE_0__.PlaneGeometry(), this._material);\n        this._quad.geometry.computeBoundingBox();\n        this._scene.add(this._quad);\n        this._renderTarget = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderTarget(this.width, this.height, rtOptions);\n        this._renderTarget.texture.mapping = ((_q = options.renderTargetOptions) === null || _q === void 0 ? void 0 : _q.mapping) !== undefined ? (_r = options.renderTargetOptions) === null || _r === void 0 ? void 0 : _r.mapping : three__WEBPACK_IMPORTED_MODULE_0__.UVMapping;\n    }\n    /**\n     * Instantiates a temporary renderer\n     *\n     * @returns\n     */ static instantiateRenderer() {\n        const renderer = new three__WEBPACK_IMPORTED_MODULE_0__.WebGLRenderer();\n        renderer.setSize(128, 128);\n        // renderer.outputColorSpace = SRGBColorSpace\n        // renderer.toneMapping = LinearToneMapping\n        // renderer.debug.checkShaderErrors = false\n        // this._rendererIsDisposable = true\n        return renderer;\n    }\n    /**\n     * Obtains a Buffer containing the rendered texture.\n     *\n     * @throws Error if the browser cannot read pixels from this RenderTarget type.\n     * @returns a TypedArray containing RGBA values from this renderer\n     */ toArray() {\n        if (!this._supportsReadPixels) throw new Error(\"Can't read pixels in this browser\");\n        const out = getBufferForType(this._type, this._width, this._height);\n        this._renderer.readRenderTargetPixels(this._renderTarget, 0, 0, this._width, this._height, out);\n        return out;\n    }\n    /**\n     * Performs a readPixel operation in the renderTarget\n     * and returns a DataTexture containing the read data\n     *\n     * @param options options\n     * @returns\n     */ toDataTexture(options) {\n        const returnValue = new three__WEBPACK_IMPORTED_MODULE_0__.DataTexture(// fixed values\n        this.toArray(), this.width, this.height, three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat, this._type, // user values\n        (options === null || options === void 0 ? void 0 : options.mapping) || three__WEBPACK_IMPORTED_MODULE_0__.UVMapping, (options === null || options === void 0 ? void 0 : options.wrapS) || three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.wrapT) || three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, (options === null || options === void 0 ? void 0 : options.magFilter) || three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter, (options === null || options === void 0 ? void 0 : options.minFilter) || three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter, (options === null || options === void 0 ? void 0 : options.anisotropy) || 1, // fixed value\n        three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace);\n        // set this afterwards, we can't set it in constructor\n        returnValue.generateMipmaps = (options === null || options === void 0 ? void 0 : options.generateMipmaps) !== undefined ? options === null || options === void 0 ? void 0 : options.generateMipmaps : false;\n        return returnValue;\n    }\n    /**\n     * If using a disposable renderer, it will dispose it.\n     */ disposeOnDemandRenderer() {\n        this._renderer.setRenderTarget(null);\n        if (this._rendererIsDisposable) {\n            this._renderer.dispose();\n            this._renderer.forceContextLoss();\n        }\n    }\n    /**\n     * Will dispose of **all** assets used by this renderer.\n     *\n     *\n     * @param disposeRenderTarget will dispose of the renderTarget which will not be usable later\n     * set this to true if you passed the `renderTarget.texture` to a `PMREMGenerator`\n     * or are otherwise done with it.\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const mesh = new Mesh(geometry, new MeshBasicMaterial({ map: result.renderTarget.texture }) )\n     * // DO NOT dispose the renderTarget here,\n     * // it is used directly in the material\n     * result.dispose()\n     * ```\n     *\n     * @example\n     * ```js\n     * const loader = new HDRJPGLoader(renderer)\n     * const pmremGenerator = new PMREMGenerator( renderer );\n     * const result = await loader.loadAsync('gainmap.jpeg')\n     * const envMap = pmremGenerator.fromEquirectangular(result.renderTarget.texture)\n     * const mesh = new Mesh(geometry, new MeshStandardMaterial({ envMap }) )\n     * // renderTarget can be disposed here\n     * // because it was used to generate a PMREM texture\n     * result.dispose(true)\n     * ```\n     */ dispose(disposeRenderTarget) {\n        this.disposeOnDemandRenderer();\n        if (disposeRenderTarget) {\n            this.renderTarget.dispose();\n        }\n        // dispose shader material texture uniforms\n        if (this.material instanceof three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial) {\n            Object.values(this.material.uniforms).forEach((v)=>{\n                if (v.value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Texture) v.value.dispose();\n            });\n        }\n        // dispose other material properties\n        Object.values(this.material).forEach((value)=>{\n            if (value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Texture) value.dispose();\n        });\n        this.material.dispose();\n        this._quad.geometry.dispose();\n    }\n    /**\n     * Width of the texture\n     */ get width() {\n        return this._width;\n    }\n    set width(value) {\n        this._width = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * Height of the texture\n     */ get height() {\n        return this._height;\n    }\n    set height(value) {\n        this._height = value;\n        this._renderTarget.setSize(this._width, this._height);\n    }\n    /**\n     * The renderer used\n     */ get renderer() {\n        return this._renderer;\n    }\n    /**\n     * The `WebGLRenderTarget` used.\n     */ get renderTarget() {\n        return this._renderTarget;\n    }\n    set renderTarget(value) {\n        this._renderTarget = value;\n        this._width = value.width;\n        this._height = value.height;\n    // this._type = value.texture.type\n    }\n    /**\n     * The `Material` used.\n     */ get material() {\n        return this._material;\n    }\n    /**\n     *\n     */ get type() {\n        return this._type;\n    }\n    get colorSpace() {\n        return this._colorSpace;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQG1vbm9ncmlkL2dhaW5tYXAtanMvZGlzdC9RdWFkUmVuZGVyZXItRHVPUFJHQTQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7O0NBR0MsR0FFNFU7QUFFN1UsTUFBTXNCLG1CQUFtQixDQUFDQyxNQUFNQyxPQUFPQztJQUNuQyxJQUFJQztJQUNKLE9BQVFIO1FBQ0osS0FBS0gsbURBQWdCQTtZQUNqQk0sTUFBTSxJQUFJQyxrQkFBa0JILFFBQVFDLFNBQVM7WUFDN0M7UUFDSixLQUFLcEIsZ0RBQWFBO1lBQ2RxQixNQUFNLElBQUlFLFlBQVlKLFFBQVFDLFNBQVM7WUFDdkM7UUFDSixLQUFLTixrREFBZUE7WUFDaEJPLE1BQU0sSUFBSUcsWUFBWUwsUUFBUUMsU0FBUztZQUN2QztRQUNKLEtBQUtQLDJDQUFRQTtZQUNUUSxNQUFNLElBQUlJLFVBQVVOLFFBQVFDLFNBQVM7WUFDckM7UUFDSixLQUFLUiw0Q0FBU0E7WUFDVlMsTUFBTSxJQUFJSyxXQUFXUCxRQUFRQyxTQUFTO1lBQ3RDO1FBQ0osS0FBS1QsMENBQU9BO1lBQ1JVLE1BQU0sSUFBSU0sV0FBV1IsUUFBUUMsU0FBUztZQUN0QztRQUNKLEtBQUtuQiw0Q0FBU0E7WUFDVm9CLE1BQU0sSUFBSU8sYUFBYVQsUUFBUUMsU0FBUztZQUN4QztRQUNKO1lBQ0ksTUFBTSxJQUFJUyxNQUFNO0lBQ3hCO0lBQ0EsT0FBT1I7QUFDWDtBQUNBLElBQUlTO0FBQ0o7Ozs7Ozs7Ozs7O0NBV0MsR0FDRCxNQUFNQyxnQkFBZ0IsQ0FBQ2IsTUFBTWMsVUFBVUMsUUFBUUM7SUFDM0MsSUFBSUoseUJBQXlCSyxXQUN6QixPQUFPTDtJQUNYLE1BQU1NLFNBQVMsSUFBSWhDLG9EQUFpQkEsQ0FBQyxHQUFHLEdBQUc4QjtJQUMzQ0YsU0FBU0ssZUFBZSxDQUFDRDtJQUN6QixNQUFNRSxPQUFPLElBQUlwQyx1Q0FBSUEsQ0FBQyxJQUFJQyxnREFBYUEsSUFBSSxJQUFJYSxvREFBaUJBLENB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SSxDQUFDbkMsTUFBTSxFQUFFLElBQUksQ0FBQ0MsT0FBTztJQUN4RDtJQUNBOztLQUVDLEdBQ0QsSUFBSXBELFNBQVM7UUFBRSxPQUFPLElBQUksQ0FBQ29ELE9BQU87SUFBRTtJQUNwQyxJQUFJcEQsT0FBT21HLEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQy9DLE9BQU8sR0FBRytDO1FBQ2YsSUFBSSxDQUFDcEQsYUFBYSxDQUFDdUMsT0FBTyxDQUFDLElBQUksQ0FBQ25DLE1BQU0sRUFBRSxJQUFJLENBQUNDLE9BQU87SUFDeEQ7SUFDQTs7S0FFQyxHQUNELElBQUl4QyxXQUFXO1FBQUUsT0FBTyxJQUFJLENBQUNrQyxTQUFTO0lBQUU7SUFDeEM7O0tBRUMsR0FDRCxJQUFJK0MsZUFBZTtRQUFFLE9BQU8sSUFBSSxDQUFDOUMsYUFBYTtJQUFFO0lBQ2hELElBQUk4QyxhQUFhTSxLQUFLLEVBQUU7UUFDcEIsSUFBSSxDQUFDcEQsYUFBYSxHQUFHb0Q7UUFDckIsSUFBSSxDQUFDaEQsTUFBTSxHQUFHZ0QsTUFBTXBHLEtBQUs7UUFDekIsSUFBSSxDQUFDcUQsT0FBTyxHQUFHK0MsTUFBTW5HLE1BQU07SUFDM0Isa0NBQWtDO0lBQ3RDO0lBQ0E7O0tBRUMsR0FDRCxJQUFJd0IsV0FBVztRQUFFLE9BQU8sSUFBSSxDQUFDMkMsU0FBUztJQUFFO0lBQ3hDOztLQUVDLEdBQ0QsSUFBSXJFLE9BQU87UUFBRSxPQUFPLElBQUksQ0FBQ3VELEtBQUs7SUFBRTtJQUNoQyxJQUFJRSxhQUFhO1FBQUUsT0FBTyxJQUFJLENBQUNELFdBQVc7SUFBRTtBQUNoRDtBQUU2QiIsInNvdXJjZXMiOlsid2VicGFjazovL2F1dG9jcmF0ZS13ZWIvLi9ub2RlX21vZHVsZXMvQG1vbm9ncmlkL2dhaW5tYXAtanMvZGlzdC9RdWFkUmVuZGVyZXItRHVPUFJHQTQuanM/YmY3OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb25vZ3JpZC9nYWlubWFwLWpzIHYzLjEuMFxuICogV2l0aCDinaTvuI8sIGJ5IE1PTk9HUklEIDxybmRAbW9ub2dyaWQuY29tPlxuICovXG5cbmltcG9ydCB7IFJHQkFGb3JtYXQsIExpbmVhckZpbHRlciwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgU2NlbmUsIE9ydGhvZ3JhcGhpY0NhbWVyYSwgSGFsZkZsb2F0VHlwZSwgRmxvYXRUeXBlLCBNZXNoLCBQbGFuZUdlb21ldHJ5LCBXZWJHTFJlbmRlclRhcmdldCwgVVZNYXBwaW5nLCBXZWJHTFJlbmRlcmVyLCBEYXRhVGV4dHVyZSwgTGluZWFyU1JHQkNvbG9yU3BhY2UsIFNoYWRlck1hdGVyaWFsLCBUZXh0dXJlLCBJbnRUeXBlLCBTaG9ydFR5cGUsIEJ5dGVUeXBlLCBVbnNpZ25lZEludFR5cGUsIFVuc2lnbmVkQnl0ZVR5cGUsIE1lc2hCYXNpY01hdGVyaWFsIH0gZnJvbSAndGhyZWUnO1xuXG5jb25zdCBnZXRCdWZmZXJGb3JUeXBlID0gKHR5cGUsIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICBsZXQgb3V0O1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFVuc2lnbmVkQnl0ZVR5cGU6XG4gICAgICAgICAgICBvdXQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEhhbGZGbG9hdFR5cGU6XG4gICAgICAgICAgICBvdXQgPSBuZXcgVWludDE2QXJyYXkod2lkdGggKiBoZWlnaHQgKiA0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFVuc2lnbmVkSW50VHlwZTpcbiAgICAgICAgICAgIG91dCA9IG5ldyBVaW50MzJBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQnl0ZVR5cGU6XG4gICAgICAgICAgICBvdXQgPSBuZXcgSW50OEFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTaG9ydFR5cGU6XG4gICAgICAgICAgICBvdXQgPSBuZXcgSW50MTZBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgSW50VHlwZTpcbiAgICAgICAgICAgIG91dCA9IG5ldyBJbnQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBGbG9hdFR5cGU6XG4gICAgICAgICAgICBvdXQgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0ICogNCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgZGF0YSB0eXBlJyk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG59O1xubGV0IF9jYW5SZWFkUGl4ZWxzUmVzdWx0O1xuLyoqXG4gKiBUZXN0IGlmIHRoaXMgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBjYW4gY29ycmVjdGx5IHJlYWQgcGl4ZWxzIGZyb20gdGhlIHNwZWNpZmllZFxuICogUmVuZGVyIHRhcmdldCB0eXBlLlxuICpcbiAqIFJ1bnMgb25seSBvbmNlXG4gKlxuICogQHBhcmFtIHR5cGVcbiAqIEBwYXJhbSByZW5kZXJlclxuICogQHBhcmFtIGNhbWVyYVxuICogQHBhcmFtIHJlbmRlclRhcmdldE9wdGlvbnNcbiAqIEByZXR1cm5zXG4gKi9cbmNvbnN0IGNhblJlYWRQaXhlbHMgPSAodHlwZSwgcmVuZGVyZXIsIGNhbWVyYSwgcmVuZGVyVGFyZ2V0T3B0aW9ucykgPT4ge1xuICAgIGlmIChfY2FuUmVhZFBpeGVsc1Jlc3VsdCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gX2NhblJlYWRQaXhlbHNSZXN1bHQ7XG4gICAgY29uc3QgdGVzdFJUID0gbmV3IFdlYkdMUmVuZGVyVGFyZ2V0KDEsIDEsIHJlbmRlclRhcmdldE9wdGlvbnMpO1xuICAgIHJlbmRlcmVyLnNldFJlbmRlclRhcmdldCh0ZXN0UlQpO1xuICAgIGNvbnN0IG1lc2ggPSBuZXcgTWVzaChuZXcgUGxhbmVHZW9tZXRyeSgpLCBuZXcgTWVzaEJhc2ljTWF0ZXJpYWwoeyBjb2xvcjogMHhmZmZmZmYgfSkpO1xuICAgIHJlbmRlcmVyLnJlbmRlcihtZXNoLCBjYW1lcmEpO1xuICAgIHJlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcbiAgICBjb25zdCBvdXQgPSBnZXRCdWZmZXJGb3JUeXBlKHR5cGUsIHRlc3RSVC53aWR0aCwgdGVzdFJULmhlaWdodCk7XG4gICAgcmVuZGVyZXIucmVhZFJlbmRlclRhcmdldFBpeGVscyh0ZXN0UlQsIDAsIDAsIHRlc3RSVC53aWR0aCwgdGVzdFJULmhlaWdodCwgb3V0KTtcbiAgICB0ZXN0UlQuZGlzcG9zZSgpO1xuICAgIG1lc2guZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgIG1lc2gubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIF9jYW5SZWFkUGl4ZWxzUmVzdWx0ID0gb3V0WzBdICE9PSAwO1xuICAgIHJldHVybiBfY2FuUmVhZFBpeGVsc1Jlc3VsdDtcbn07XG4vKipcbiAqIFV0aWxpdHkgY2xhc3MgdXNlZCBmb3IgcmVuZGVyaW5nIGEgdGV4dHVyZSB3aXRoIGEgbWF0ZXJpYWxcbiAqXG4gKiBAY2F0ZWdvcnkgQ29yZVxuICogQGdyb3VwIENvcmVcbiAqL1xuY2xhc3MgUXVhZFJlbmRlcmVyIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFF1YWRSZW5kZXJlclxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbnMgUGFyYW1ldGVycyBmb3IgdGhpcyBRdWFkUmVuZGVyZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xLCBfcjtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXJJc0Rpc3Bvc2FibGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3VwcG9ydHNSZWFkUGl4ZWxzID0gdHJ1ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbmRlcnMgdGhlIGlucHV0IHRleHR1cmUgdXNpbmcgdGhlIHNwZWNpZmllZCBtYXRlcmlhbFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZW5kZXIgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQodGhpcy5fcmVuZGVyVGFyZ2V0KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVuZGVyKHRoaXMuX3NjZW5lLCB0aGlzLl9jYW1lcmEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRSZW5kZXJUYXJnZXQobnVsbCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fd2lkdGggPSBvcHRpb25zLndpZHRoO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcbiAgICAgICAgdGhpcy5fdHlwZSA9IG9wdGlvbnMudHlwZTtcbiAgICAgICAgdGhpcy5fY29sb3JTcGFjZSA9IG9wdGlvbnMuY29sb3JTcGFjZTtcbiAgICAgICAgY29uc3QgcnRPcHRpb25zID0ge1xuICAgICAgICAgICAgLy8gZml4ZWQgb3B0aW9uc1xuICAgICAgICAgICAgZm9ybWF0OiBSR0JBRm9ybWF0LFxuICAgICAgICAgICAgZGVwdGhCdWZmZXI6IGZhbHNlLFxuICAgICAgICAgICAgc3RlbmNpbEJ1ZmZlcjogZmFsc2UsXG4gICAgICAgICAgICAvLyB1c2VyIG9wdGlvbnNcbiAgICAgICAgICAgIHR5cGU6IHRoaXMuX3R5cGUsIC8vIHNldCBpbiBjbGFzcyBwcm9wZXJ0eVxuICAgICAgICAgICAgY29sb3JTcGFjZTogdGhpcy5fY29sb3JTcGFjZSwgLy8gc2V0IGluIGNsYXNzIHByb3BlcnR5XG4gICAgICAgICAgICBhbmlzb3Ryb3B5OiAoKF9hID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYW5pc290cm9weSkgIT09IHVuZGVmaW5lZCA/IChfYiA9IG9wdGlvbnMucmVuZGVyVGFyZ2V0T3B0aW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmFuaXNvdHJvcHkgOiAxLFxuICAgICAgICAgICAgZ2VuZXJhdGVNaXBtYXBzOiAoKF9jID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuZ2VuZXJhdGVNaXBtYXBzKSAhPT0gdW5kZWZpbmVkID8gKF9kID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2QuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2UsXG4gICAgICAgICAgICBtYWdGaWx0ZXI6ICgoX2UgPSBvcHRpb25zLnJlbmRlclRhcmdldE9wdGlvbnMpID09PSBudWxsIHx8IF9lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZS5tYWdGaWx0ZXIpICE9PSB1bmRlZmluZWQgPyAoX2YgPSBvcHRpb25zLnJlbmRlclRhcmdldE9wdGlvbnMpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5tYWdGaWx0ZXIgOiBMaW5lYXJGaWx0ZXIsXG4gICAgICAgICAgICBtaW5GaWx0ZXI6ICgoX2cgPSBvcHRpb25zLnJlbmRlclRhcmdldE9wdGlvbnMpID09PSBudWxsIHx8IF9nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZy5taW5GaWx0ZXIpICE9PSB1bmRlZmluZWQgPyAoX2ggPSBvcHRpb25zLnJlbmRlclRhcmdldE9wdGlvbnMpID09PSBudWxsIHx8IF9oID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaC5taW5GaWx0ZXIgOiBMaW5lYXJGaWx0ZXIsXG4gICAgICAgICAgICBzYW1wbGVzOiAoKF9qID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ouc2FtcGxlcykgIT09IHVuZGVmaW5lZCA/IChfayA9IG9wdGlvbnMucmVuZGVyVGFyZ2V0T3B0aW9ucykgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLnNhbXBsZXMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB3cmFwUzogKChfbCA9IG9wdGlvbnMucmVuZGVyVGFyZ2V0T3B0aW9ucykgPT09IG51bGwgfHwgX2wgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9sLndyYXBTKSAhPT0gdW5kZWZpbmVkID8gKF9tID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfbSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX20ud3JhcFMgOiBDbGFtcFRvRWRnZVdyYXBwaW5nLFxuICAgICAgICAgICAgd3JhcFQ6ICgoX28gPSBvcHRpb25zLnJlbmRlclRhcmdldE9wdGlvbnMpID09PSBudWxsIHx8IF9vID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfby53cmFwVCkgIT09IHVuZGVmaW5lZCA/IChfcCA9IG9wdGlvbnMucmVuZGVyVGFyZ2V0T3B0aW9ucykgPT09IG51bGwgfHwgX3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9wLndyYXBUIDogQ2xhbXBUb0VkZ2VXcmFwcGluZ1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG9wdGlvbnMubWF0ZXJpYWw7XG4gICAgICAgIGlmIChvcHRpb25zLnJlbmRlcmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IG9wdGlvbnMucmVuZGVyZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IFF1YWRSZW5kZXJlci5pbnN0YW50aWF0ZVJlbmRlcmVyKCk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlcklzRGlzcG9zYWJsZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2NlbmUgPSBuZXcgU2NlbmUoKTtcbiAgICAgICAgdGhpcy5fY2FtZXJhID0gbmV3IE9ydGhvZ3JhcGhpY0NhbWVyYSgpO1xuICAgICAgICB0aGlzLl9jYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEwKTtcbiAgICAgICAgdGhpcy5fY2FtZXJhLmxlZnQgPSAtMC41O1xuICAgICAgICB0aGlzLl9jYW1lcmEucmlnaHQgPSAwLjU7XG4gICAgICAgIHRoaXMuX2NhbWVyYS50b3AgPSAwLjU7XG4gICAgICAgIHRoaXMuX2NhbWVyYS5ib3R0b20gPSAtMC41O1xuICAgICAgICB0aGlzLl9jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgICAgICBpZiAoIWNhblJlYWRQaXhlbHModGhpcy5fdHlwZSwgdGhpcy5fcmVuZGVyZXIsIHRoaXMuX2NhbWVyYSwgcnRPcHRpb25zKSkge1xuICAgICAgICAgICAgbGV0IGFsdGVybmF0aXZlVHlwZTtcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgSGFsZkZsb2F0VHlwZTpcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRpdmVUeXBlID0gdGhpcy5fcmVuZGVyZXIuZXh0ZW5zaW9ucy5oYXMoJ0VYVF9jb2xvcl9idWZmZXJfZmxvYXQnKSA/IEZsb2F0VHlwZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWx0ZXJuYXRpdmVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFRoaXMgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHJlYWRpbmcgcGl4ZWxzIGZyb20gJHt0aGlzLl90eXBlfSBSZW5kZXJUYXJnZXRzLCBzd2l0Y2hpbmcgdG8gJHtGbG9hdFR5cGV9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IGFsdGVybmF0aXZlVHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1cHBvcnRzUmVhZFBpeGVscyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVGhpcyBicm93c2VyIGRvcyBub3Qgc3VwcG9ydCB0b0FycmF5IG9yIHRvRGF0YVRleHR1cmUsIGNhbGxzIHRvIHRob3NlIG1ldGhvZHMgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IgdGhyb3duJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcXVhZCA9IG5ldyBNZXNoKG5ldyBQbGFuZUdlb21ldHJ5KCksIHRoaXMuX21hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5fcXVhZC5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgICAgICAgdGhpcy5fc2NlbmUuYWRkKHRoaXMuX3F1YWQpO1xuICAgICAgICB0aGlzLl9yZW5kZXJUYXJnZXQgPSBuZXcgV2ViR0xSZW5kZXJUYXJnZXQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHJ0T3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX3JlbmRlclRhcmdldC50ZXh0dXJlLm1hcHBpbmcgPSAoKF9xID0gb3B0aW9ucy5yZW5kZXJUYXJnZXRPcHRpb25zKSA9PT0gbnVsbCB8fCBfcSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3EubWFwcGluZykgIT09IHVuZGVmaW5lZCA/IChfciA9IG9wdGlvbnMucmVuZGVyVGFyZ2V0T3B0aW9ucykgPT09IG51bGwgfHwgX3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9yLm1hcHBpbmcgOiBVVk1hcHBpbmc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluc3RhbnRpYXRlcyBhIHRlbXBvcmFyeSByZW5kZXJlclxuICAgICAqXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBzdGF0aWMgaW5zdGFudGlhdGVSZW5kZXJlcigpIHtcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBuZXcgV2ViR0xSZW5kZXJlcigpO1xuICAgICAgICByZW5kZXJlci5zZXRTaXplKDEyOCwgMTI4KTtcbiAgICAgICAgLy8gcmVuZGVyZXIub3V0cHV0Q29sb3JTcGFjZSA9IFNSR0JDb2xvclNwYWNlXG4gICAgICAgIC8vIHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gTGluZWFyVG9uZU1hcHBpbmdcbiAgICAgICAgLy8gcmVuZGVyZXIuZGVidWcuY2hlY2tTaGFkZXJFcnJvcnMgPSBmYWxzZVxuICAgICAgICAvLyB0aGlzLl9yZW5kZXJlcklzRGlzcG9zYWJsZSA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJlbmRlcmVyO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPYnRhaW5zIGEgQnVmZmVyIGNvbnRhaW5pbmcgdGhlIHJlbmRlcmVkIHRleHR1cmUuXG4gICAgICpcbiAgICAgKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBicm93c2VyIGNhbm5vdCByZWFkIHBpeGVscyBmcm9tIHRoaXMgUmVuZGVyVGFyZ2V0IHR5cGUuXG4gICAgICogQHJldHVybnMgYSBUeXBlZEFycmF5IGNvbnRhaW5pbmcgUkdCQSB2YWx1ZXMgZnJvbSB0aGlzIHJlbmRlcmVyXG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdXBwb3J0c1JlYWRQaXhlbHMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhblxcJ3QgcmVhZCBwaXhlbHMgaW4gdGhpcyBicm93c2VyJyk7XG4gICAgICAgIGNvbnN0IG91dCA9IGdldEJ1ZmZlckZvclR5cGUodGhpcy5fdHlwZSwgdGhpcy5fd2lkdGgsIHRoaXMuX2hlaWdodCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlYWRSZW5kZXJUYXJnZXRQaXhlbHModGhpcy5fcmVuZGVyVGFyZ2V0LCAwLCAwLCB0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0LCBvdXQpO1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhIHJlYWRQaXhlbCBvcGVyYXRpb24gaW4gdGhlIHJlbmRlclRhcmdldFxuICAgICAqIGFuZCByZXR1cm5zIGEgRGF0YVRleHR1cmUgY29udGFpbmluZyB0aGUgcmVhZCBkYXRhXG4gICAgICpcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25zXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICB0b0RhdGFUZXh0dXJlKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmV0dXJuVmFsdWUgPSBuZXcgRGF0YVRleHR1cmUoXG4gICAgICAgIC8vIGZpeGVkIHZhbHVlc1xuICAgICAgICB0aGlzLnRvQXJyYXkoKSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIFJHQkFGb3JtYXQsIHRoaXMuX3R5cGUsIFxuICAgICAgICAvLyB1c2VyIHZhbHVlc1xuICAgICAgICAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1hcHBpbmcpIHx8IFVWTWFwcGluZywgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53cmFwUykgfHwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy53cmFwVCkgfHwgQ2xhbXBUb0VkZ2VXcmFwcGluZywgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYWdGaWx0ZXIpIHx8IExpbmVhckZpbHRlciwgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5taW5GaWx0ZXIpIHx8IExpbmVhckZpbHRlciwgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hbmlzb3Ryb3B5KSB8fCAxLCBcbiAgICAgICAgLy8gZml4ZWQgdmFsdWVcbiAgICAgICAgTGluZWFyU1JHQkNvbG9yU3BhY2UpO1xuICAgICAgICAvLyBzZXQgdGhpcyBhZnRlcndhcmRzLCB3ZSBjYW4ndCBzZXQgaXQgaW4gY29uc3RydWN0b3JcbiAgICAgICAgcmV0dXJuVmFsdWUuZ2VuZXJhdGVNaXBtYXBzID0gKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5nZW5lcmF0ZU1pcG1hcHMpICE9PSB1bmRlZmluZWQgPyBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZ2VuZXJhdGVNaXBtYXBzIDogZmFsc2U7XG4gICAgICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgdXNpbmcgYSBkaXNwb3NhYmxlIHJlbmRlcmVyLCBpdCB3aWxsIGRpc3Bvc2UgaXQuXG4gICAgICovXG4gICAgZGlzcG9zZU9uRGVtYW5kUmVuZGVyZXIoKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFJlbmRlclRhcmdldChudWxsKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVySXNEaXNwb3NhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5kaXNwb3NlKCk7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5mb3JjZUNvbnRleHRMb3NzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lsbCBkaXNwb3NlIG9mICoqYWxsKiogYXNzZXRzIHVzZWQgYnkgdGhpcyByZW5kZXJlci5cbiAgICAgKlxuICAgICAqXG4gICAgICogQHBhcmFtIGRpc3Bvc2VSZW5kZXJUYXJnZXQgd2lsbCBkaXNwb3NlIG9mIHRoZSByZW5kZXJUYXJnZXQgd2hpY2ggd2lsbCBub3QgYmUgdXNhYmxlIGxhdGVyXG4gICAgICogc2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3UgcGFzc2VkIHRoZSBgcmVuZGVyVGFyZ2V0LnRleHR1cmVgIHRvIGEgYFBNUkVNR2VuZXJhdG9yYFxuICAgICAqIG9yIGFyZSBvdGhlcndpc2UgZG9uZSB3aXRoIGl0LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGxvYWRlciA9IG5ldyBIRFJKUEdMb2FkZXIocmVuZGVyZXIpXG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9hZGVyLmxvYWRBc3luYygnZ2Fpbm1hcC5qcGVnJylcbiAgICAgKiBjb25zdCBtZXNoID0gbmV3IE1lc2goZ2VvbWV0cnksIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IG1hcDogcmVzdWx0LnJlbmRlclRhcmdldC50ZXh0dXJlIH0pIClcbiAgICAgKiAvLyBETyBOT1QgZGlzcG9zZSB0aGUgcmVuZGVyVGFyZ2V0IGhlcmUsXG4gICAgICogLy8gaXQgaXMgdXNlZCBkaXJlY3RseSBpbiB0aGUgbWF0ZXJpYWxcbiAgICAgKiByZXN1bHQuZGlzcG9zZSgpXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgbG9hZGVyID0gbmV3IEhEUkpQR0xvYWRlcihyZW5kZXJlcilcbiAgICAgKiBjb25zdCBwbXJlbUdlbmVyYXRvciA9IG5ldyBQTVJFTUdlbmVyYXRvciggcmVuZGVyZXIgKTtcbiAgICAgKiBjb25zdCByZXN1bHQgPSBhd2FpdCBsb2FkZXIubG9hZEFzeW5jKCdnYWlubWFwLmpwZWcnKVxuICAgICAqIGNvbnN0IGVudk1hcCA9IHBtcmVtR2VuZXJhdG9yLmZyb21FcXVpcmVjdGFuZ3VsYXIocmVzdWx0LnJlbmRlclRhcmdldC50ZXh0dXJlKVxuICAgICAqIGNvbnN0IG1lc2ggPSBuZXcgTWVzaChnZW9tZXRyeSwgbmV3IE1lc2hTdGFuZGFyZE1hdGVyaWFsKHsgZW52TWFwIH0pIClcbiAgICAgKiAvLyByZW5kZXJUYXJnZXQgY2FuIGJlIGRpc3Bvc2VkIGhlcmVcbiAgICAgKiAvLyBiZWNhdXNlIGl0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIGEgUE1SRU0gdGV4dHVyZVxuICAgICAqIHJlc3VsdC5kaXNwb3NlKHRydWUpXG4gICAgICogYGBgXG4gICAgICovXG4gICAgZGlzcG9zZShkaXNwb3NlUmVuZGVyVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZGlzcG9zZU9uRGVtYW5kUmVuZGVyZXIoKTtcbiAgICAgICAgaWYgKGRpc3Bvc2VSZW5kZXJUYXJnZXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFyZ2V0LmRpc3Bvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBkaXNwb3NlIHNoYWRlciBtYXRlcmlhbCB0ZXh0dXJlIHVuaWZvcm1zXG4gICAgICAgIGlmICh0aGlzLm1hdGVyaWFsIGluc3RhbmNlb2YgU2hhZGVyTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5tYXRlcmlhbC51bmlmb3JtcykuZm9yRWFjaCh2ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodi52YWx1ZSBpbnN0YW5jZW9mIFRleHR1cmUpXG4gICAgICAgICAgICAgICAgICAgIHYudmFsdWUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZGlzcG9zZSBvdGhlciBtYXRlcmlhbCBwcm9wZXJ0aWVzXG4gICAgICAgIE9iamVjdC52YWx1ZXModGhpcy5tYXRlcmlhbCkuZm9yRWFjaCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZXh0dXJlKVxuICAgICAgICAgICAgICAgIHZhbHVlLmRpc3Bvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgICB0aGlzLl9xdWFkLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2lkdGggb2YgdGhlIHRleHR1cmVcbiAgICAgKi9cbiAgICBnZXQgd2lkdGgoKSB7IHJldHVybiB0aGlzLl93aWR0aDsgfVxuICAgIHNldCB3aWR0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl93aWR0aCA9IHZhbHVlO1xuICAgICAgICB0aGlzLl9yZW5kZXJUYXJnZXQuc2V0U2l6ZSh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGVpZ2h0IG9mIHRoZSB0ZXh0dXJlXG4gICAgICovXG4gICAgZ2V0IGhlaWdodCgpIHsgcmV0dXJuIHRoaXMuX2hlaWdodDsgfVxuICAgIHNldCBoZWlnaHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWU7XG4gICAgICAgIHRoaXMuX3JlbmRlclRhcmdldC5zZXRTaXplKHRoaXMuX3dpZHRoLCB0aGlzLl9oZWlnaHQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgcmVuZGVyZXIgdXNlZFxuICAgICAqL1xuICAgIGdldCByZW5kZXJlcigpIHsgcmV0dXJuIHRoaXMuX3JlbmRlcmVyOyB9XG4gICAgLyoqXG4gICAgICogVGhlIGBXZWJHTFJlbmRlclRhcmdldGAgdXNlZC5cbiAgICAgKi9cbiAgICBnZXQgcmVuZGVyVGFyZ2V0KCkgeyByZXR1cm4gdGhpcy5fcmVuZGVyVGFyZ2V0OyB9XG4gICAgc2V0IHJlbmRlclRhcmdldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yZW5kZXJUYXJnZXQgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fd2lkdGggPSB2YWx1ZS53aWR0aDtcbiAgICAgICAgdGhpcy5faGVpZ2h0ID0gdmFsdWUuaGVpZ2h0O1xuICAgICAgICAvLyB0aGlzLl90eXBlID0gdmFsdWUudGV4dHVyZS50eXBlXG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBgTWF0ZXJpYWxgIHVzZWQuXG4gICAgICovXG4gICAgZ2V0IG1hdGVyaWFsKCkgeyByZXR1cm4gdGhpcy5fbWF0ZXJpYWw7IH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqL1xuICAgIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy5fdHlwZTsgfVxuICAgIGdldCBjb2xvclNwYWNlKCkgeyByZXR1cm4gdGhpcy5fY29sb3JTcGFjZTsgfVxufVxuXG5leHBvcnQgeyBRdWFkUmVuZGVyZXIgYXMgUSB9O1xuIl0sIm5hbWVzIjpbIlJHQkFGb3JtYXQiLCJMaW5lYXJGaWx0ZXIiLCJDbGFtcFRvRWRnZVdyYXBwaW5nIiwiU2NlbmUiLCJPcnRob2dyYXBoaWNDYW1lcmEiLCJIYWxmRmxvYXRUeXBlIiwiRmxvYXRUeXBlIiwiTWVzaCIsIlBsYW5lR2VvbWV0cnkiLCJXZWJHTFJlbmRlclRhcmdldCIsIlVWTWFwcGluZyIsIldlYkdMUmVuZGVyZXIiLCJEYXRhVGV4dHVyZSIsIkxpbmVhclNSR0JDb2xvclNwYWNlIiwiU2hhZGVyTWF0ZXJpYWwiLCJUZXh0dXJlIiwiSW50VHlwZSIsIlNob3J0VHlwZSIsIkJ5dGVUeXBlIiwiVW5zaWduZWRJbnRUeXBlIiwiVW5zaWduZWRCeXRlVHlwZSIsIk1lc2hCYXNpY01hdGVyaWFsIiwiZ2V0QnVmZmVyRm9yVHlwZSIsInR5cGUiLCJ3aWR0aCIsImhlaWdodCIsIm91dCIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRXJyb3IiLCJfY2FuUmVhZFBpeGVsc1Jlc3VsdCIsImNhblJlYWRQaXhlbHMiLCJyZW5kZXJlciIsImNhbWVyYSIsInJlbmRlclRhcmdldE9wdGlvbnMiLCJ1bmRlZmluZWQiLCJ0ZXN0UlQiLCJzZXRSZW5kZXJUYXJnZXQiLCJtZXNoIiwiY29sb3IiLCJyZW5kZXIiLCJyZWFkUmVuZGVyVGFyZ2V0UGl4ZWxzIiwiZGlzcG9zZSIsImdlb21ldHJ5IiwibWF0ZXJpYWwiLCJRdWFkUmVuZGVyZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJfZyIsIl9oIiwiX2oiLCJfayIsIl9sIiwiX20iLCJfbyIsIl9wIiwiX3EiLCJfciIsIl9yZW5kZXJlcklzRGlzcG9zYWJsZSIsIl9zdXBwb3J0c1JlYWRQaXhlbHMiLCJfcmVuZGVyZXIiLCJfcmVuZGVyVGFyZ2V0IiwiX3NjZW5lIiwiX2NhbWVyYSIsImUiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX3R5cGUiLCJfY29sb3JTcGFjZSIsImNvbG9yU3BhY2UiLCJydE9wdGlvbnMiLCJmb3JtYXQiLCJkZXB0aEJ1ZmZlciIsInN0ZW5jaWxCdWZmZXIiLCJhbmlzb3Ryb3B5IiwiZ2VuZXJhdGVNaXBtYXBzIiwibWFnRmlsdGVyIiwibWluRmlsdGVyIiwic2FtcGxlcyIsIndyYXBTIiwid3JhcFQiLCJfbWF0ZXJpYWwiLCJpbnN0YW50aWF0ZVJlbmRlcmVyIiwicG9zaXRpb24iLCJzZXQiLCJsZWZ0IiwicmlnaHQiLCJ0b3AiLCJib3R0b20iLCJ1cGRhdGVQcm9qZWN0aW9uTWF0cml4IiwiYWx0ZXJuYXRpdmVUeXBlIiwiZXh0ZW5zaW9ucyIsImhhcyIsImNvbnNvbGUiLCJ3YXJuIiwiX3F1YWQiLCJjb21wdXRlQm91bmRpbmdCb3giLCJhZGQiLCJ0ZXh0dXJlIiwibWFwcGluZyIsInNldFNpemUiLCJ0b0FycmF5IiwidG9EYXRhVGV4dHVyZSIsInJldHVyblZhbHVlIiwiZGlzcG9zZU9uRGVtYW5kUmVuZGVyZXIiLCJmb3JjZUNvbnRleHRMb3NzIiwiZGlzcG9zZVJlbmRlclRhcmdldCIsInJlbmRlclRhcmdldCIsIk9iamVjdCIsInZhbHVlcyIsInVuaWZvcm1zIiwiZm9yRWFjaCIsInYiLCJ2YWx1ZSIsIlEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@monogrid/gainmap-js/dist/QuadRenderer-DuOPRGA4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@monogrid/gainmap-js/dist/decode.js":
/*!**********************************************************!*\
  !*** ./node_modules/@monogrid/gainmap-js/dist/decode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GainMapDecoderMaterial: () => (/* binding */ GainMapDecoderMaterial),\n/* harmony export */   GainMapLoader: () => (/* binding */ GainMapLoader),\n/* harmony export */   HDRJPGLoader: () => (/* binding */ HDRJPGLoader),\n/* harmony export */   JPEGRLoader: () => (/* binding */ HDRJPGLoader),\n/* harmony export */   MPFExtractor: () => (/* binding */ MPFExtractor),\n/* harmony export */   QuadRenderer: () => (/* reexport safe */ _QuadRenderer_DuOPRGA4_js__WEBPACK_IMPORTED_MODULE_1__.Q),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   extractGainmapFromJPEG: () => (/* binding */ extractGainmapFromJPEG),\n/* harmony export */   extractXMP: () => (/* binding */ extractXMP)\n/* harmony export */ });\n/* harmony import */ var _QuadRenderer_DuOPRGA4_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QuadRenderer-DuOPRGA4.js */ \"(ssr)/./node_modules/@monogrid/gainmap-js/dist/QuadRenderer-DuOPRGA4.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/**\n * @monogrid/gainmap-js v3.1.0\n * With ❤️, by MONOGRID <rnd@monogrid.com>\n */ \n\nconst vertexShader = /* glsl */ `\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\nconst fragmentShader = /* glsl */ `\n// min half float value\n#define HALF_FLOAT_MIN vec3( -65504, -65504, -65504 )\n// max half float value\n#define HALF_FLOAT_MAX vec3( 65504, 65504, 65504 )\n\nuniform sampler2D sdr;\nuniform sampler2D gainMap;\nuniform vec3 gamma;\nuniform vec3 offsetHdr;\nuniform vec3 offsetSdr;\nuniform vec3 gainMapMin;\nuniform vec3 gainMapMax;\nuniform float weightFactor;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 rgb = texture2D( sdr, vUv ).rgb;\n  vec3 recovery = texture2D( gainMap, vUv ).rgb;\n  vec3 logRecovery = pow( recovery, gamma );\n  vec3 logBoost = gainMapMin * ( 1.0 - logRecovery ) + gainMapMax * logRecovery;\n  vec3 hdrColor = (rgb + offsetSdr) * exp2( logBoost * weightFactor ) - offsetHdr;\n  vec3 clampedHdrColor = max( HALF_FLOAT_MIN, min( HALF_FLOAT_MAX, hdrColor ));\n  gl_FragColor = vec4( clampedHdrColor , 1.0 );\n}\n`;\n/**\n * A Material which is able to decode the Gainmap into a full HDR Representation\n *\n * @category Materials\n * @group Materials\n */ class GainMapDecoderMaterial extends three__WEBPACK_IMPORTED_MODULE_0__.ShaderMaterial {\n    /**\n     *\n     * @param params\n     */ constructor({ gamma, offsetHdr, offsetSdr, gainMapMin, gainMapMax, maxDisplayBoost, hdrCapacityMin, hdrCapacityMax, sdr, gainMap }){\n        super({\n            name: \"GainMapDecoderMaterial\",\n            vertexShader,\n            fragmentShader,\n            uniforms: {\n                sdr: {\n                    value: sdr\n                },\n                gainMap: {\n                    value: gainMap\n                },\n                gamma: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1.0 / gamma[0], 1.0 / gamma[1], 1.0 / gamma[2])\n                },\n                offsetHdr: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(offsetHdr)\n                },\n                offsetSdr: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(offsetSdr)\n                },\n                gainMapMin: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(gainMapMin)\n                },\n                gainMapMax: {\n                    value: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().fromArray(gainMapMax)\n                },\n                weightFactor: {\n                    value: (Math.log2(maxDisplayBoost) - hdrCapacityMin) / (hdrCapacityMax - hdrCapacityMin)\n                }\n            },\n            blending: three__WEBPACK_IMPORTED_MODULE_0__.NoBlending,\n            depthTest: false,\n            depthWrite: false\n        });\n        this._maxDisplayBoost = maxDisplayBoost;\n        this._hdrCapacityMin = hdrCapacityMin;\n        this._hdrCapacityMax = hdrCapacityMax;\n        this.needsUpdate = true;\n        this.uniformsNeedUpdate = true;\n    }\n    get sdr() {\n        return this.uniforms.sdr.value;\n    }\n    set sdr(value) {\n        this.uniforms.sdr.value = value;\n    }\n    get gainMap() {\n        return this.uniforms.gainMap.value;\n    }\n    set gainMap(value) {\n        this.uniforms.gainMap.value = value;\n    }\n    /**\n     * @see {@link GainMapMetadata.offsetHdr}\n     */ get offsetHdr() {\n        return this.uniforms.offsetHdr.value.toArray();\n    }\n    set offsetHdr(value) {\n        this.uniforms.offsetHdr.value.fromArray(value);\n    }\n    /**\n     * @see {@link GainMapMetadata.offsetSdr}\n     */ get offsetSdr() {\n        return this.uniforms.offsetSdr.value.toArray();\n    }\n    set offsetSdr(value) {\n        this.uniforms.offsetSdr.value.fromArray(value);\n    }\n    /**\n     * @see {@link GainMapMetadata.gainMapMin}\n     */ get gainMapMin() {\n        return this.uniforms.gainMapMin.value.toArray();\n    }\n    set gainMapMin(value) {\n        this.uniforms.gainMapMin.value.fromArray(value);\n    }\n    /**\n     * @see {@link GainMapMetadata.gainMapMax}\n     */ get gainMapMax() {\n        return this.uniforms.gainMapMax.value.toArray();\n    }\n    set gainMapMax(value) {\n        this.uniforms.gainMapMax.value.fromArray(value);\n    }\n    /**\n     * @see {@link GainMapMetadata.gamma}\n     */ get gamma() {\n        const g = this.uniforms.gamma.value;\n        return [\n            1 / g.x,\n            1 / g.y,\n            1 / g.z\n        ];\n    }\n    set gamma(value) {\n        const g = this.uniforms.gamma.value;\n        g.x = 1.0 / value[0];\n        g.y = 1.0 / value[1];\n        g.z = 1.0 / value[2];\n    }\n    /**\n     * @see {@link GainMapMetadata.hdrCapacityMin}\n     * @remarks Logarithmic space\n     */ get hdrCapacityMin() {\n        return this._hdrCapacityMin;\n    }\n    set hdrCapacityMin(value) {\n        this._hdrCapacityMin = value;\n        this.calculateWeight();\n    }\n    /**\n     * @see {@link GainMapMetadata.hdrCapacityMin}\n     * @remarks Logarithmic space\n     */ get hdrCapacityMax() {\n        return this._hdrCapacityMax;\n    }\n    set hdrCapacityMax(value) {\n        this._hdrCapacityMax = value;\n        this.calculateWeight();\n    }\n    /**\n     * @see {@link GainmapDecodingParameters.maxDisplayBoost}\n     * @remarks Non Logarithmic space\n     */ get maxDisplayBoost() {\n        return this._maxDisplayBoost;\n    }\n    set maxDisplayBoost(value) {\n        this._maxDisplayBoost = Math.max(1, Math.min(65504, value));\n        this.calculateWeight();\n    }\n    calculateWeight() {\n        const val = (Math.log2(this._maxDisplayBoost) - this._hdrCapacityMin) / (this._hdrCapacityMax - this._hdrCapacityMin);\n        this.uniforms.weightFactor.value = Math.max(0, Math.min(1, val));\n    }\n}\n/**\n * Decodes a gain map using a WebGLRenderTarget\n *\n * @category Decoding Functions\n * @group Decoding Functions\n * @example\n * import { decode } from '@monogrid/gainmap-js'\n * import {\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   TextureLoader,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const textureLoader = new TextureLoader()\n *\n * // load SDR Representation\n * const sdr = await textureLoader.loadAsync('sdr.jpg')\n * // load Gain map recovery image\n * const gainMap = await textureLoader.loadAsync('gainmap.jpg')\n * // load metadata\n * const metadata = await (await fetch('metadata.json')).json()\n *\n * const result = await decode({\n *   sdr,\n *   gainMap,\n *   // this allows to use `result.renderTarget.texture` directly\n *   renderer,\n *   // this will restore the full HDR range\n *   maxDisplayBoost: Math.pow(2, metadata.hdrCapacityMax),\n *   ...metadata\n * })\n *\n * const scene = new Scene()\n * // `result` can be used to populate a Texture\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n * @param params\n * @returns\n * @throws {Error} if the WebGLRenderer fails to render the gain map\n */ const decode = (params)=>{\n    const { sdr, gainMap, renderer } = params;\n    if (sdr.colorSpace !== three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace) {\n        console.warn(\"SDR Colorspace needs to be *SRGBColorSpace*, setting it automatically\");\n        sdr.colorSpace = three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace;\n    }\n    sdr.needsUpdate = true;\n    if (gainMap.colorSpace !== three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace) {\n        console.warn(\"Gainmap Colorspace needs to be *LinearSRGBColorSpace*, setting it automatically\");\n        gainMap.colorSpace = three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace;\n    }\n    gainMap.needsUpdate = true;\n    const material = new GainMapDecoderMaterial({\n        ...params,\n        sdr,\n        gainMap\n    });\n    const quadRenderer = new _QuadRenderer_DuOPRGA4_js__WEBPACK_IMPORTED_MODULE_1__.Q({\n        // TODO: three types are generic, eslint complains here, see how we can solve\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        width: sdr.image.width,\n        // TODO: three types are generic, eslint complains here, see how we can solve\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        height: sdr.image.height,\n        type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n        colorSpace: three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace,\n        material,\n        renderer,\n        renderTargetOptions: params.renderTargetOptions\n    });\n    try {\n        quadRenderer.render();\n    } catch (e) {\n        quadRenderer.disposeOnDemandRenderer();\n        throw e;\n    }\n    return quadRenderer;\n};\nclass GainMapNotFoundError extends Error {\n}\nclass XMPMetadataNotFoundError extends Error {\n}\nconst getXMLValue = (xml, tag, defaultValue)=>{\n    // Check for attribute format first: tag=\"value\"\n    const attributeMatch = new RegExp(`${tag}=\"([^\"]*)\"`, \"i\").exec(xml);\n    if (attributeMatch) return attributeMatch[1];\n    // Check for tag format: <tag>value</tag> or <tag><rdf:li>value</rdf:li>...</tag>\n    const tagMatch = new RegExp(`<${tag}[^>]*>([\\\\s\\\\S]*?)</${tag}>`, \"i\").exec(xml);\n    if (tagMatch) {\n        // Check if it contains rdf:li elements\n        const liValues = tagMatch[1].match(/<rdf:li>([^<]*)<\\/rdf:li>/g);\n        if (liValues && liValues.length === 3) {\n            return liValues.map((v)=>v.replace(/<\\/?rdf:li>/g, \"\"));\n        }\n        return tagMatch[1].trim();\n    }\n    if (defaultValue !== undefined) return defaultValue;\n    throw new Error(`Can't find ${tag} in gainmap metadata`);\n};\nconst extractXMP = (input)=>{\n    let str;\n    // support node test environment\n    if (typeof TextDecoder !== \"undefined\") str = new TextDecoder().decode(input);\n    else str = input.toString();\n    let start = str.indexOf(\"<x:xmpmeta\");\n    while(start !== -1){\n        const end = str.indexOf(\"x:xmpmeta>\", start);\n        const xmpBlock = str.slice(start, end + 10);\n        try {\n            const gainMapMin = getXMLValue(xmpBlock, \"hdrgm:GainMapMin\", \"0\");\n            const gainMapMax = getXMLValue(xmpBlock, \"hdrgm:GainMapMax\");\n            const gamma = getXMLValue(xmpBlock, \"hdrgm:Gamma\", \"1\");\n            const offsetSDR = getXMLValue(xmpBlock, \"hdrgm:OffsetSDR\", \"0.015625\");\n            const offsetHDR = getXMLValue(xmpBlock, \"hdrgm:OffsetHDR\", \"0.015625\");\n            // These are always attributes, so we can use a simpler regex\n            const hdrCapacityMinMatch = /hdrgm:HDRCapacityMin=\"([^\"]*)\"/.exec(xmpBlock);\n            const hdrCapacityMin = hdrCapacityMinMatch ? hdrCapacityMinMatch[1] : \"0\";\n            const hdrCapacityMaxMatch = /hdrgm:HDRCapacityMax=\"([^\"]*)\"/.exec(xmpBlock);\n            if (!hdrCapacityMaxMatch) throw new Error(\"Incomplete gainmap metadata\");\n            const hdrCapacityMax = hdrCapacityMaxMatch[1];\n            return {\n                gainMapMin: Array.isArray(gainMapMin) ? gainMapMin.map((v)=>parseFloat(v)) : [\n                    parseFloat(gainMapMin),\n                    parseFloat(gainMapMin),\n                    parseFloat(gainMapMin)\n                ],\n                gainMapMax: Array.isArray(gainMapMax) ? gainMapMax.map((v)=>parseFloat(v)) : [\n                    parseFloat(gainMapMax),\n                    parseFloat(gainMapMax),\n                    parseFloat(gainMapMax)\n                ],\n                gamma: Array.isArray(gamma) ? gamma.map((v)=>parseFloat(v)) : [\n                    parseFloat(gamma),\n                    parseFloat(gamma),\n                    parseFloat(gamma)\n                ],\n                offsetSdr: Array.isArray(offsetSDR) ? offsetSDR.map((v)=>parseFloat(v)) : [\n                    parseFloat(offsetSDR),\n                    parseFloat(offsetSDR),\n                    parseFloat(offsetSDR)\n                ],\n                offsetHdr: Array.isArray(offsetHDR) ? offsetHDR.map((v)=>parseFloat(v)) : [\n                    parseFloat(offsetHDR),\n                    parseFloat(offsetHDR),\n                    parseFloat(offsetHDR)\n                ],\n                hdrCapacityMin: parseFloat(hdrCapacityMin),\n                hdrCapacityMax: parseFloat(hdrCapacityMax)\n            };\n        } catch (e) {\n        // Continue searching for another xmpmeta block if this one fails\n        }\n        start = str.indexOf(\"<x:xmpmeta\", end);\n    }\n};\n/**\n * MPF Extractor (Multi Picture Format Extractor)\n * By Henrik S Nilsson 2019\n *\n * Extracts images stored in images based on the MPF format (found here: https://www.cipa.jp/e/std/std-sec.html\n * under \"CIPA DC-007-Translation-2021 Multi-Picture Format\"\n *\n * Overly commented, and without intention of being complete or production ready.\n * Created to extract depth maps from iPhone images, and to learn about image metadata.\n * Kudos to: Phil Harvey (exiftool), Jaume Sanchez (android-lens-blur-depth-extractor)\n */ class MPFExtractor {\n    constructor(options){\n        this.options = {\n            debug: options && options.debug !== undefined ? options.debug : false,\n            extractFII: options && options.extractFII !== undefined ? options.extractFII : true,\n            extractNonFII: options && options.extractNonFII !== undefined ? options.extractNonFII : true\n        };\n    }\n    extract(imageArrayBuffer) {\n        return new Promise((resolve, reject)=>{\n            const debug = this.options.debug;\n            const dataView = new DataView(imageArrayBuffer.buffer);\n            // If you're executing this line on a big endian machine, it'll be reversed.\n            // bigEnd further down though, refers to the endianness of the image itself.\n            if (dataView.getUint16(0) !== 0xffd8) {\n                reject(new Error(\"Not a valid jpeg\"));\n                return;\n            }\n            const length = dataView.byteLength;\n            let offset = 2;\n            let loops = 0;\n            let marker; // APP# marker\n            while(offset < length){\n                if (++loops > 250) {\n                    reject(new Error(`Found no marker after ${loops} loops 😵`));\n                    return;\n                }\n                if (dataView.getUint8(offset) !== 0xff) {\n                    reject(new Error(`Not a valid marker at offset 0x${offset.toString(16)}, found: 0x${dataView.getUint8(offset).toString(16)}`));\n                    return;\n                }\n                marker = dataView.getUint8(offset + 1);\n                if (debug) console.log(`Marker: ${marker.toString(16)}`);\n                if (marker === 0xe2) {\n                    if (debug) console.log(\"Found APP2 marker (0xffe2)\");\n                    // Works for iPhone 8 Plus, X, and XSMax. Or any photos of MPF format.\n                    // Great way to visualize image information in html is using Exiftool. E.g.:\n                    // ./exiftool.exe -htmldump -wantTrailer photo.jpg > photo.html\n                    const formatPt = offset + 4;\n                    /*\n                     *  Structure of the MP Format Identifier\n                     *\n                     *  Offset Addr.  | Code (Hex)  | Description\n                     *  +00             ff            Marker Prefix      <-- offset\n                     *  +01             e2            APP2\n                     *  +02             #n            APP2 Field Length\n                     *  +03             #n            APP2 Field Length\n                     *  +04             4d            'M'                <-- formatPt\n                     *  +05             50            'P'\n                     *  +06             46            'F'\n                     *  +07             00            NULL\n                     *                                                   <-- tiffOffset\n                     */ if (dataView.getUint32(formatPt) === 0x4d504600) {\n                        // Found MPF tag, so we start dig out sub images\n                        const tiffOffset = formatPt + 4;\n                        let bigEnd; // Endianness from TIFF header\n                        // Test for TIFF validity and endianness\n                        // 0x4949 and 0x4D4D ('II' and 'MM') marks Little Endian and Big Endian\n                        if (dataView.getUint16(tiffOffset) === 0x4949) {\n                            bigEnd = false;\n                        } else if (dataView.getUint16(tiffOffset) === 0x4d4d) {\n                            bigEnd = true;\n                        } else {\n                            reject(new Error(\"No valid endianness marker found in TIFF header\"));\n                            return;\n                        }\n                        if (dataView.getUint16(tiffOffset + 2, !bigEnd) !== 0x002a) {\n                            reject(new Error(\"Not valid TIFF data! (no 0x002A marker)\"));\n                            return;\n                        }\n                        // 32 bit number stating the offset from the start of the 8 Byte MP Header\n                        // to MP Index IFD Least possible value is thus 8 (means 0 offset)\n                        const firstIFDOffset = dataView.getUint32(tiffOffset + 4, !bigEnd);\n                        if (firstIFDOffset < 0x00000008) {\n                            reject(new Error(\"Not valid TIFF data! (First offset less than 8)\"));\n                            return;\n                        }\n                        // Move ahead to MP Index IFD\n                        // Assume we're at the first IFD, so firstIFDOffset points to\n                        // MP Index IFD and not MP Attributes IFD. (If we try extract from a sub image,\n                        // we fail silently here due to this assumption)\n                        // Count (2 Byte) | MP Index Fields a.k.a. MP Entries (count * 12 Byte) | Offset of Next IFD (4 Byte)\n                        const dirStart = tiffOffset + firstIFDOffset; // Start of IFD (Image File Directory)\n                        const count = dataView.getUint16(dirStart, !bigEnd); // Count of MPEntries (2 Byte)\n                        // Extract info from MPEntries (starting after Count)\n                        const entriesStart = dirStart + 2;\n                        let numberOfImages = 0;\n                        for(let i = entriesStart; i < entriesStart + 12 * count; i += 12){\n                            // Each entry is 12 Bytes long\n                            // Check MP Index IFD tags, here we only take tag 0xb001 = Number of images\n                            if (dataView.getUint16(i, !bigEnd) === 0xb001) {\n                                // stored in Last 4 bytes of its 12 Byte entry.\n                                numberOfImages = dataView.getUint32(i + 8, !bigEnd);\n                            }\n                        }\n                        const nextIFDOffsetLen = 4; // 4 Byte offset field that appears after MP Index IFD tags\n                        const MPImageListValPt = dirStart + 2 + count * 12 + nextIFDOffsetLen;\n                        const images = [];\n                        for(let i = MPImageListValPt; i < MPImageListValPt + numberOfImages * 16; i += 16){\n                            const image = {\n                                MPType: dataView.getUint32(i, !bigEnd),\n                                size: dataView.getUint32(i + 4, !bigEnd),\n                                // This offset is specified relative to the address of the MP Endian\n                                // field in the MP Header, unless the image is a First Individual Image,\n                                // in which case the value of the offset shall be NULL (0x00000000).\n                                dataOffset: dataView.getUint32(i + 8, !bigEnd),\n                                dependantImages: dataView.getUint32(i + 12, !bigEnd),\n                                start: -1,\n                                end: -1,\n                                isFII: false\n                            };\n                            if (!image.dataOffset) {\n                                // dataOffset is 0x00000000 for First Individual Image\n                                image.start = 0;\n                                image.isFII = true;\n                            } else {\n                                image.start = tiffOffset + image.dataOffset;\n                                image.isFII = false;\n                            }\n                            image.end = image.start + image.size;\n                            images.push(image);\n                        }\n                        if (this.options.extractNonFII && images.length) {\n                            const bufferBlob = new Blob([\n                                dataView\n                            ]);\n                            const imgs = [];\n                            for (const image of images){\n                                if (image.isFII && !this.options.extractFII) {\n                                    continue; // Skip FII\n                                }\n                                const imageBlob = bufferBlob.slice(image.start, image.end + 1, \"image/jpeg\");\n                                // we don't need this\n                                // const imageUrl = URL.createObjectURL(imageBlob)\n                                // image.img = document.createElement('img')\n                                // image.img.src = imageUrl\n                                imgs.push(imageBlob);\n                            }\n                            resolve(imgs);\n                        }\n                    }\n                }\n                offset += 2 + dataView.getUint16(offset + 2);\n            }\n        });\n    }\n}\n/**\n * Extracts XMP Metadata and the gain map recovery image\n * from a single JPEG file.\n *\n * @category Decoding Functions\n * @group Decoding Functions\n * @param jpegFile an `Uint8Array` containing and encoded JPEG file\n * @returns an sdr `Uint8Array` compressed in JPEG, a gainMap `Uint8Array` compressed in JPEG and the XMP parsed XMP metadata\n * @throws Error if XMP Metadata is not found\n * @throws Error if Gain map image is not found\n * @example\n * import { FileLoader } from 'three'\n * import { extractGainmapFromJPEG } from '@monogrid/gainmap-js'\n *\n * const jpegFile = await new FileLoader()\n *  .setResponseType('arraybuffer')\n *  .loadAsync('image.jpg')\n *\n * const { sdr, gainMap, metadata } = extractGainmapFromJPEG(jpegFile)\n */ const extractGainmapFromJPEG = async (jpegFile)=>{\n    const metadata = extractXMP(jpegFile);\n    if (!metadata) throw new XMPMetadataNotFoundError(\"Gain map XMP metadata not found\");\n    const mpfExtractor = new MPFExtractor({\n        extractFII: true,\n        extractNonFII: true\n    });\n    const images = await mpfExtractor.extract(jpegFile);\n    if (images.length !== 2) throw new GainMapNotFoundError(\"Gain map recovery image not found\");\n    return {\n        sdr: new Uint8Array(await images[0].arrayBuffer()),\n        gainMap: new Uint8Array(await images[1].arrayBuffer()),\n        metadata\n    };\n};\n/**\n * private function, async get image from blob\n *\n * @param blob\n * @returns\n */ const getHTMLImageFromBlob = (blob)=>{\n    return new Promise((resolve, reject)=>{\n        const img = document.createElement(\"img\");\n        img.onload = ()=>{\n            resolve(img);\n        };\n        img.onerror = (e)=>{\n            reject(e);\n        };\n        img.src = URL.createObjectURL(blob);\n    });\n};\nclass LoaderBase extends three__WEBPACK_IMPORTED_MODULE_0__.Loader {\n    /**\n     *\n     * @param renderer\n     * @param manager\n     */ constructor(renderer, manager){\n        super(manager);\n        if (renderer) this._renderer = renderer;\n        this._internalLoadingManager = new three__WEBPACK_IMPORTED_MODULE_0__.LoadingManager();\n    }\n    /**\n     * Specify the renderer to use when rendering the gain map\n     *\n     * @param renderer\n     * @returns\n     */ setRenderer(renderer) {\n        this._renderer = renderer;\n        return this;\n    }\n    /**\n     * Specify the renderTarget options to use when rendering the gain map\n     *\n     * @param options\n     * @returns\n     */ setRenderTargetOptions(options) {\n        this._renderTargetOptions = options;\n        return this;\n    }\n    /**\n     * @private\n     * @returns\n     */ prepareQuadRenderer() {\n        if (!this._renderer) console.warn(\"WARNING: An existing WebGL Renderer was not passed to this Loader constructor or in setRenderer, the result of this Loader will need to be converted to a Data Texture with toDataTexture() before you can use it in your renderer.\");\n        // temporary values\n        const material = new GainMapDecoderMaterial({\n            gainMapMax: [\n                1,\n                1,\n                1\n            ],\n            gainMapMin: [\n                0,\n                0,\n                0\n            ],\n            gamma: [\n                1,\n                1,\n                1\n            ],\n            offsetHdr: [\n                1,\n                1,\n                1\n            ],\n            offsetSdr: [\n                1,\n                1,\n                1\n            ],\n            hdrCapacityMax: 1,\n            hdrCapacityMin: 0,\n            maxDisplayBoost: 1,\n            gainMap: new three__WEBPACK_IMPORTED_MODULE_0__.Texture(),\n            sdr: new three__WEBPACK_IMPORTED_MODULE_0__.Texture()\n        });\n        return new _QuadRenderer_DuOPRGA4_js__WEBPACK_IMPORTED_MODULE_1__.Q({\n            width: 16,\n            height: 16,\n            type: three__WEBPACK_IMPORTED_MODULE_0__.HalfFloatType,\n            colorSpace: three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace,\n            material,\n            renderer: this._renderer,\n            renderTargetOptions: this._renderTargetOptions\n        });\n    }\n    /**\n   * @private\n   * @param quadRenderer\n   * @param metadata\n   * @param sdrBuffer\n   * @param gainMapBuffer\n   */ async render(quadRenderer, metadata, sdrBuffer, gainMapBuffer) {\n        // this is optional, will render a black gain-map if not present\n        const gainMapBlob = gainMapBuffer ? new Blob([\n            gainMapBuffer\n        ], {\n            type: \"image/jpeg\"\n        }) : undefined;\n        const sdrBlob = new Blob([\n            sdrBuffer\n        ], {\n            type: \"image/jpeg\"\n        });\n        let sdrImage;\n        let gainMapImage;\n        let needsFlip = false;\n        if (typeof createImageBitmap === \"undefined\") {\n            const res = await Promise.all([\n                gainMapBlob ? getHTMLImageFromBlob(gainMapBlob) : Promise.resolve(undefined),\n                getHTMLImageFromBlob(sdrBlob)\n            ]);\n            gainMapImage = res[0];\n            sdrImage = res[1];\n            needsFlip = true;\n        } else {\n            const res = await Promise.all([\n                gainMapBlob ? createImageBitmap(gainMapBlob, {\n                    imageOrientation: \"flipY\"\n                }) : Promise.resolve(undefined),\n                createImageBitmap(sdrBlob, {\n                    imageOrientation: \"flipY\"\n                })\n            ]);\n            gainMapImage = res[0];\n            sdrImage = res[1];\n        }\n        const gainMap = new three__WEBPACK_IMPORTED_MODULE_0__.Texture(gainMapImage || new ImageData(2, 2), three__WEBPACK_IMPORTED_MODULE_0__.UVMapping, three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter, three__WEBPACK_IMPORTED_MODULE_0__.LinearMipMapLinearFilter, three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType, 1, three__WEBPACK_IMPORTED_MODULE_0__.LinearSRGBColorSpace);\n        gainMap.flipY = needsFlip;\n        gainMap.needsUpdate = true;\n        const sdr = new three__WEBPACK_IMPORTED_MODULE_0__.Texture(sdrImage, three__WEBPACK_IMPORTED_MODULE_0__.UVMapping, three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, three__WEBPACK_IMPORTED_MODULE_0__.ClampToEdgeWrapping, three__WEBPACK_IMPORTED_MODULE_0__.LinearFilter, three__WEBPACK_IMPORTED_MODULE_0__.LinearMipMapLinearFilter, three__WEBPACK_IMPORTED_MODULE_0__.RGBAFormat, three__WEBPACK_IMPORTED_MODULE_0__.UnsignedByteType, 1, three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);\n        sdr.flipY = needsFlip;\n        sdr.needsUpdate = true;\n        quadRenderer.width = sdrImage.width;\n        quadRenderer.height = sdrImage.height;\n        quadRenderer.material.gainMap = gainMap;\n        quadRenderer.material.sdr = sdr;\n        quadRenderer.material.gainMapMin = metadata.gainMapMin;\n        quadRenderer.material.gainMapMax = metadata.gainMapMax;\n        quadRenderer.material.offsetHdr = metadata.offsetHdr;\n        quadRenderer.material.offsetSdr = metadata.offsetSdr;\n        quadRenderer.material.gamma = metadata.gamma;\n        quadRenderer.material.hdrCapacityMin = metadata.hdrCapacityMin;\n        quadRenderer.material.hdrCapacityMax = metadata.hdrCapacityMax;\n        quadRenderer.material.maxDisplayBoost = Math.pow(2, metadata.hdrCapacityMax);\n        quadRenderer.material.needsUpdate = true;\n        quadRenderer.render();\n    }\n}\n/**\n * A Three.js Loader for the gain map format.\n *\n * @category Loaders\n * @group Loaders\n *\n * @example\n * import { GainMapLoader } from '@monogrid/gainmap-js'\n * import {\n *   EquirectangularReflectionMapping,\n *   LinearFilter,\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const loader = new GainMapLoader(renderer)\n *\n * const result = await loader.loadAsync(['sdr.jpeg', 'gainmap.jpeg', 'metadata.json'])\n * // `result` can be used to populate a Texture\n *\n * const scene = new Scene()\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // Starting from three.js r159\n * // `result.renderTarget.texture` can\n * // also be used as Equirectangular scene background\n * //\n * // it was previously needed to convert it\n * // to a DataTexture with `result.toDataTexture()`\n * scene.background = result.renderTarget.texture\n * scene.background.mapping = EquirectangularReflectionMapping\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n */ class GainMapLoader extends LoaderBase {\n    /**\n     * Loads a gainmap using separate data\n     * * sdr image\n     * * gain map image\n     * * metadata json\n     *\n     * useful for webp gain maps\n     *\n     * @param urls An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n     * @param onLoad Load complete callback, will receive the result\n     * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n     * @param onError Error callback\n     * @returns\n     */ load([sdrUrl, gainMapUrl, metadataUrl], onLoad, onProgress, onError) {\n        const quadRenderer = this.prepareQuadRenderer();\n        let sdr;\n        let gainMap;\n        let metadata;\n        const loadCheck = async ()=>{\n            if (sdr && gainMap && metadata) {\n                // solves #16\n                try {\n                    await this.render(quadRenderer, metadata, sdr, gainMap);\n                } catch (error) {\n                    this.manager.itemError(sdrUrl);\n                    this.manager.itemError(gainMapUrl);\n                    this.manager.itemError(metadataUrl);\n                    if (typeof onError === \"function\") onError(error);\n                    quadRenderer.disposeOnDemandRenderer();\n                    return;\n                }\n                if (typeof onLoad === \"function\") onLoad(quadRenderer);\n                this.manager.itemEnd(sdrUrl);\n                this.manager.itemEnd(gainMapUrl);\n                this.manager.itemEnd(metadataUrl);\n                quadRenderer.disposeOnDemandRenderer();\n            }\n        };\n        let sdrLengthComputable = true;\n        let sdrTotal = 0;\n        let sdrLoaded = 0;\n        let gainMapLengthComputable = true;\n        let gainMapTotal = 0;\n        let gainMapLoaded = 0;\n        let metadataLengthComputable = true;\n        let metadataTotal = 0;\n        let metadataLoaded = 0;\n        const progressHandler = ()=>{\n            if (typeof onProgress === \"function\") {\n                const total = sdrTotal + gainMapTotal + metadataTotal;\n                const loaded = sdrLoaded + gainMapLoaded + metadataLoaded;\n                const lengthComputable = sdrLengthComputable && gainMapLengthComputable && metadataLengthComputable;\n                onProgress(new ProgressEvent(\"progress\", {\n                    lengthComputable,\n                    loaded,\n                    total\n                }));\n            }\n        };\n        this.manager.itemStart(sdrUrl);\n        this.manager.itemStart(gainMapUrl);\n        this.manager.itemStart(metadataUrl);\n        const sdrLoader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader(this._internalLoadingManager);\n        sdrLoader.setResponseType(\"arraybuffer\");\n        sdrLoader.setRequestHeader(this.requestHeader);\n        sdrLoader.setPath(this.path);\n        sdrLoader.setWithCredentials(this.withCredentials);\n        sdrLoader.load(sdrUrl, async (buffer)=>{\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */ if (typeof buffer === \"string\") throw new Error(\"Invalid sdr buffer\");\n            sdr = buffer;\n            await loadCheck();\n        }, (e)=>{\n            sdrLengthComputable = e.lengthComputable;\n            sdrLoaded = e.loaded;\n            sdrTotal = e.total;\n            progressHandler();\n        }, (error)=>{\n            this.manager.itemError(sdrUrl);\n            if (typeof onError === \"function\") onError(error);\n        });\n        const gainMapLoader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader(this._internalLoadingManager);\n        gainMapLoader.setResponseType(\"arraybuffer\");\n        gainMapLoader.setRequestHeader(this.requestHeader);\n        gainMapLoader.setPath(this.path);\n        gainMapLoader.setWithCredentials(this.withCredentials);\n        gainMapLoader.load(gainMapUrl, async (buffer)=>{\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */ if (typeof buffer === \"string\") throw new Error(\"Invalid gainmap buffer\");\n            gainMap = buffer;\n            await loadCheck();\n        }, (e)=>{\n            gainMapLengthComputable = e.lengthComputable;\n            gainMapLoaded = e.loaded;\n            gainMapTotal = e.total;\n            progressHandler();\n        }, (error)=>{\n            this.manager.itemError(gainMapUrl);\n            if (typeof onError === \"function\") onError(error);\n        });\n        const metadataLoader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader(this._internalLoadingManager);\n        // metadataLoader.setResponseType('json')\n        metadataLoader.setRequestHeader(this.requestHeader);\n        metadataLoader.setPath(this.path);\n        metadataLoader.setWithCredentials(this.withCredentials);\n        metadataLoader.load(metadataUrl, async (json)=>{\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */ if (typeof json !== \"string\") throw new Error(\"Invalid metadata string\");\n            // TODO: implement check on JSON file and remove this eslint disable\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            metadata = JSON.parse(json);\n            await loadCheck();\n        }, (e)=>{\n            metadataLengthComputable = e.lengthComputable;\n            metadataLoaded = e.loaded;\n            metadataTotal = e.total;\n            progressHandler();\n        }, (error)=>{\n            this.manager.itemError(metadataUrl);\n            if (typeof onError === \"function\") onError(error);\n        });\n        return quadRenderer;\n    }\n}\n/**\n * A Three.js Loader for a JPEG with embedded gainmap metadata.\n *\n * @category Loaders\n * @group Loaders\n *\n * @example\n * import { HDRJPGLoader } from '@monogrid/gainmap-js'\n * import {\n *   EquirectangularReflectionMapping,\n *   LinearFilter,\n *   Mesh,\n *   MeshBasicMaterial,\n *   PerspectiveCamera,\n *   PlaneGeometry,\n *   Scene,\n *   WebGLRenderer\n * } from 'three'\n *\n * const renderer = new WebGLRenderer()\n *\n * const loader = new HDRJPGLoader(renderer)\n *\n * const result = await loader.loadAsync('gainmap.jpeg')\n * // `result` can be used to populate a Texture\n *\n * const scene = new Scene()\n * const mesh = new Mesh(\n *   new PlaneGeometry(),\n *   new MeshBasicMaterial({ map: result.renderTarget.texture })\n * )\n * scene.add(mesh)\n * renderer.render(scene, new PerspectiveCamera())\n *\n * // Starting from three.js r159\n * // `result.renderTarget.texture` can\n * // also be used as Equirectangular scene background\n * //\n * // it was previously needed to convert it\n * // to a DataTexture with `result.toDataTexture()`\n * scene.background = result.renderTarget.texture\n * scene.background.mapping = EquirectangularReflectionMapping\n *\n * // result must be manually disposed\n * // when you are done using it\n * result.dispose()\n *\n */ class HDRJPGLoader extends LoaderBase {\n    /**\n     * Loads a JPEG containing gain map metadata\n     * Renders a normal SDR image if gainmap data is not found\n     *\n     * @param url An array in the form of [sdr.jpg, gainmap.jpg, metadata.json]\n     * @param onLoad Load complete callback, will receive the result\n     * @param onProgress Progress callback, will receive a {@link ProgressEvent}\n     * @param onError Error callback\n     * @returns\n     */ load(url, onLoad, onProgress, onError) {\n        const quadRenderer = this.prepareQuadRenderer();\n        const loader = new three__WEBPACK_IMPORTED_MODULE_0__.FileLoader(this._internalLoadingManager);\n        loader.setResponseType(\"arraybuffer\");\n        loader.setRequestHeader(this.requestHeader);\n        loader.setPath(this.path);\n        loader.setWithCredentials(this.withCredentials);\n        this.manager.itemStart(url);\n        loader.load(url, async (jpeg)=>{\n            /* istanbul ignore if\n             this condition exists only because of three.js types + strict mode\n            */ if (typeof jpeg === \"string\") throw new Error(\"Invalid buffer, received [string], was expecting [ArrayBuffer]\");\n            const jpegBuffer = new Uint8Array(jpeg);\n            let sdrJPEG;\n            let gainMapJPEG;\n            let metadata;\n            try {\n                const extractionResult = await extractGainmapFromJPEG(jpegBuffer);\n                // gain map is successfully reconstructed\n                sdrJPEG = extractionResult.sdr;\n                gainMapJPEG = extractionResult.gainMap;\n                metadata = extractionResult.metadata;\n            } catch (e) {\n                // render the SDR version if this is not a gainmap\n                if (e instanceof XMPMetadataNotFoundError || e instanceof GainMapNotFoundError) {\n                    console.warn(`Failure to reconstruct an HDR image from ${url}: Gain map metadata not found in the file, HDRJPGLoader will render the SDR jpeg`);\n                    metadata = {\n                        gainMapMin: [\n                            0,\n                            0,\n                            0\n                        ],\n                        gainMapMax: [\n                            1,\n                            1,\n                            1\n                        ],\n                        gamma: [\n                            1,\n                            1,\n                            1\n                        ],\n                        hdrCapacityMin: 0,\n                        hdrCapacityMax: 1,\n                        offsetHdr: [\n                            0,\n                            0,\n                            0\n                        ],\n                        offsetSdr: [\n                            0,\n                            0,\n                            0\n                        ]\n                    };\n                    sdrJPEG = jpegBuffer;\n                } else {\n                    throw e;\n                }\n            }\n            // solves #16\n            try {\n                await this.render(quadRenderer, metadata, sdrJPEG, gainMapJPEG);\n            } catch (error) {\n                this.manager.itemError(url);\n                if (typeof onError === \"function\") onError(error);\n                quadRenderer.disposeOnDemandRenderer();\n                return;\n            }\n            if (typeof onLoad === \"function\") onLoad(quadRenderer);\n            this.manager.itemEnd(url);\n            quadRenderer.disposeOnDemandRenderer();\n        }, onProgress, (error)=>{\n            this.manager.itemError(url);\n            if (typeof onError === \"function\") onError(error);\n        });\n        return quadRenderer;\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@monogrid/gainmap-js/dist/decode.js\n");

/***/ })

};
;